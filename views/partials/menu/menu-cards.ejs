<style>
.scrolling-wrapper {
    overflow-x: scroll;
    overflow-y: hidden;
    white-space: nowrap;
    -webkit-overflow-scrolling: touch;
}
.scrolling-wrapper::-webkit-scrollbar {
    display: none;
  }
.card {
    margin:5px;
    padding:2px;
    height: 300px;
    width: 300px;
    border-radius: 3px;
    background-color:green;
    display: inline-block;
    position:relative;
    background-image: url('/img/textures/cards2x.png');
    -webkit-box-shadow: 1px 0px 14px -4px rgba(0,0,0,0.85);
    -moz-box-shadow: 1px 0px 14px -4px rgba(0,0,0,0.85);
    box-shadow: 1px 0px 14px -4px rgba(0,0,0,0.85);
    
  }
  
  .card:first-child {
      margin-left:15px;
  }
  .item-img {
      border-radius: 3px 3px 0px 0px;
  }
</style>

<div id="menu-gallery-menu" class="ui top attached five item menu">
    <div class="ui dropdown icon item">
        <i class="wrench icon"></i>
        <div class="menu">
        <div class="item new" data-content="menu">
            New Menu
        </div>
        <div class="item new" data-content="category">
            New Category
        </div>
        <div class="item new" data-content="item">
            New Item
        </div>
        <div class="item new" data-content="ingredient">
            New Ingredient
        </div>
    </div>
</div>
    <a class="item content" data-action="menu">
        menus
    </a>
    <a class="item content" data-action="category">
        categories
    </a>
    <a class="item content" data-action="item">
        items
    </a>
    <a class="item content" data-action="ingredient">
        ingredients
    </a>
</div>

    <section class="scrolling-wrapper">
        <% for (let i = 0; i < items.length; i++){ %>
            <div class="card">
                <img class="item-img" src=".<%=items[i].image.url%>" width='296px'>
                <div><%=items[i].name%></div>
                
            </div>
        <% } %>
    </section>

<script>
    $('.ui.dropdown')
  .dropdown()
;
function menuGalleryController(){
    let menu_gallery_menu = document.getElementById('menu-gallery-menu');
    
    menu_gallery_menu.addEventListener('click', (event) => {
        let target = event.target;
        
        if (target.matches('.new')){
            let content = target.getAttribute('data-content');
            getForms(content)
        } else if (target.matches('.content')){
            loadGallery(target)
        }
        
    });
    
    function getForms(content){
        let modal = document.getElementById('form_modal');
        let headerDest = modal.querySelector('.header');
        let contentDest = modal.querySelector('.content');
        
        headerDest.innerHTML = `new ${content}`;
        if (content === 'category'){
            contentDest.innerHTML = `<% include ../../admin/forms/menus/create-category %>`;
            
        } else if (content === 'ingredient') {
            contentDest.innerHTML = `<% include ../../admin/forms/menus/create-ingredient %>`;
            $('select.dropdown').dropdown();
            createIngredientController();
            
        } else if (content === 'item') {
            contentDest.innerHTML = `<% include ../../admin/forms/menus/create-item %>`;
            $('select.dropdown').dropdown();
             createDishController()
      
        } else if (content === 'menu') {
            contentDest.innerHTML = `<% include ../../admin/forms/menus/create-menu %>`
            $('select.dropdown').dropdown();
          
        } else {
            contentDest.innerHTML = '';
        }
        
        
        $(modal).modal('show');
    }
    
    function loadGallery(target){
        
    }
    
    function createIngredientController(){
        var form = document.getElementById('add-ingredient');
        
        form.addEventListener('click', (event) => {
            if (event.target.closest('.type')) {
                if (event.target.matches('.item')) {
                    var color = '';
                    let target = event.target;
                    let type = target.getAttribute('data-value');
                    let destination = form.querySelector('.color');
                    console.log(destination)
                    switch(type) {
                        case 'sauce':
                            color = 'pink';
                            break;
                        case 'vegetable':
                            color = 'olive';
                            break;
                        case 'cheese':
                            color = 'yellow';
                            break;
                        case 'meat':
                            color = 'red';
                            break;
                        case 'meat-substitute':
                            color = 'orange';
                            break;
                        case 'cheese-substitute':
                            color = 'yellow';
                            break;
                        default: ''
                    }
                var color_input = `
                    <input name="color" type="hidden" value="${color}" readonly="">
                `;
                destination.innerHTML = color_input;
                }
            }
        })
    }
    function createDishController(){
        let form = document.getElementById('add-item');
        
    
        form.addEventListener('click', (event) => {
            let target = event.target;
            console.log(target)
            if (target.closest('#order-type')) {
                let selected = document.getElementById('order_type_dropdown').parentElement;
                let ordertypes = selected.querySelectorAll('a');
                let tmp = [];
                for (let i = 0; i < ordertypes.length; i++){
                    tmp.push(ordertypes[i].getAttribute('data-value'));
                }
                buildDescInputs(tmp)
            } else if (target.closest('#select-ingredients')){
                let selected = document.getElementById('ingredients_dropdown').parentElement;
                let ingredients = selected.querySelectorAll('a');
                let ingredientArray = [];
                for (let i = ingredients.length; i--;){
                    ingredientArray.push({name: ingredients[i].innerText, id: ingredients[i].getAttribute('data-value')})
                }
            
                buildIngredInputs(ingredientArray)
            } else if (target.matches('#submit-button')){
                event.preventDefault()
                let formFields = form.querySelectorAll('input');
                let formSelects = form.querySelectorAll('select');
                let formFields2 = Array.from(formFields);
                let formSelects2 = Array.from(formSelects);
                let newItem = {

                }
                let name = formFields2.find(inputs => inputs.getAttribute('name') == 'name');
                    newItem.name = name.value;
                let image = formFields2.find(inputs => inputs.getAttribute('name') == 'imagename');
                    newItem.imagename = image.files
                let locations = document.getElementById('select-locations');
                let selected_locations = locations.querySelector('.selection');
                let chosen = selected_locations.querySelectorAll('a');
                let locationIds = [];
                for (var i = 0; i < chosen.length; i++){
                    locationIds.push(chosen[i].getAttribute('data-value'))
                }
                newItem.locations = locationIds;
                console.log(newItem)
            }
        })
        
    }
    function buildDescInputs(ordertypes){
        let destination = document.getElementById('order-type-descriptions');
        let html = `
            ${ordertypes.map(ordertype => 
              ` <input name="ot_name" type="hidden" readonly="" value="${ordertype}">
                <div class="field">
                    <label>${ordertype} description</label>
                   
                    <textarea name="ot_desc" type="text" rows="3"></textarea>
                </div>`
            ).join('')}
        `;
        destination.innerHTML = html;
        $('select.dropdown').dropdown();
    }
    
    function buildIngredInputs(ingredientArray){
        console.log(ingredientArray)
        let destination = document.getElementById('ingred-desc');
        let html = ` 
            ${ingredientArray.map(ingredient =>
            
            `
                    <div class="fields">
                        <input class="ingredient-data" name="ingred_id" type="hidden" readonly="" value="${ingredient.id}">
                    <div class="eight wide field">
                        <label>${ingredient.name} qty by oz</label>
                        <input class="ingredient-data" name="ingred_qty" type="text">
                    </div>
                    <div class="eight wide field">
                        <label>${ingredient.name} price per oz</label>
                        <input class="ingredient-data" name="ingred_price" type="text">
                    </div>
                    </div>
            `
            ).join('')}
         `;
        destination.innerHTML = html;
        $('select.dropdown').dropdown();
    }
    
    function buildPrices(category, tags){
        let destination = document.getElementById('prices');
        
        
    }
    
    function sortPrices(category, tags){
            category = category.toLowerCase();
            switch (category) {
                case 'appetizers':
                     console.log('appetizers')
                     item.prices.push(
                         {
                            type: "reg",
                            id: "reg",
                            text: "Regular",
                            amount: req.body.reg
                         },
                         {
                             type: "party",
                             id: "party",
                             text: "Party Size",
                             amount: req.body.party
                         }
                         );
                    for (var a = 0; a < tags.length; a++){
                        if (tags[a] === "VR") {
                           item.prices.push(
                                {
                                    type: "vegan",
                                    id: "V",
                                    text: "Get it Vegan",
                                    amount: req.body.vegan
                                },
                                {
                                    type: "vegan_party",
                                    id: "VPS",
                                    text: "Vegan Party Size",
                                    amount: req.body.vegan_party
                                }
                            );
                        } else if (tags[a] === "GFR") {
                            item.prices.push(
                                {  
                                    type: "gluten_free_on_request",
                                    id: "GFR",
                                    text: "Get it GF",
                                    amount: req.body.gluten_free_on_request
                                },
                                {   
                                    type: "gluten_free_on_request_party",
                                    id: "GFRPS",
                                    text: "GF Party Size",
                                    amount: req.body.gluten_free_on_request_party
                                }
                            );
                        }
                    }
                    
                    break;
                case 'salads':
                    item.prices.push(
                        {   
                            type: 'sm',
                            id: 'sm',
                            text: "Sm",
                            amount: req.body.sm
                        },
                        {   
                            type: "lg",
                            price: "lg",
                            text: "Lg",
                            amount: req.body.lg
                        },
                        {   type: "party",
                            id: "PS",
                            text: "Party Size",
                            amount: req.body.party
                        }
                    );
                    break;
                case 'pasta': 
                    item.prices.push(
                        {   type: 'reg',
                            id: "reg",
                            text: "Regular",
                            amount: req.body.reg
                        },
                        {   type: 'party',
                            id: "ps",
                            text: "Party Size",
                            amount: req.body.party
                        }
                    );
                    break;
                case 'parmigiana hoagies':
                    item.prices.push(
                        {   type: 'reg',
                            id: "reg",
                            text: "Regular",
                            amount: req.body.reg
                        }
                    );
                    break;
                case 'deli style hoagies':
                   item.prices.push({
                            type: 'reg',
                            id: "reg",
                            text: "Regular",
                            amount: req.body.reg
                        });
                    break;
                case 'specialty pizza':
                   item.prices.push(
                        {   type: 'sm',
                            id: 'sm | 10"',
                            text: 'Sm | 10"',
                            amount: req.body.sm
                        },
                        {
                            type: 'med',
                            id: 'med | 12"',
                             text: 'Med | 12"',
                            amount: req.body.med
                        },
                        {
                            type: 'lg',
                            id: 'lg| 16"',
                             text: 'Lg | 16"',
                            amount: req.body.lg
                        }
                    );
                    for (var b = 0; b < tags.length; b++){
                        if (tags[b] === "GFR") {
                            item.prices.push({
                                type: 'gf',
                            id: 'gf | 10"',
                             text: 'GF | 10"',
                            amount: req.body.gf
                            })
                        }
                    }
                    break;
                case 'desserts':
                   item.prices.push({
                            type: 'reg',
                            id: "reg",
                            text: "Regular",
                            amount: req.body.reg
                        })
                    for (var c = 0; c < tags.length; c++) {
                        if (tags[c] === "lg_party") {
                            item.prices.push({
                                type: 'party',
                                id: 'PS',
                                text: "Party Size",
                                amount: req.body.party
                            })
                        }
                    }
                    break;
                default:
            }
        }
        sortPrices(req.body.category, tags)
}
menuGalleryController()
</script>

<script>
    
     
    
    
     
     
</script>

